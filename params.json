{"name":"Multitouch","tagline":"WPF 4.0 Multi Touch library with gestures","body":"For more information check my blog:\r\nhttp://lacckodes.blogspot.hu/2013/05/multitouch-in-wpf.html\r\n\r\n### Usage\r\nIn Expression Blend you can use the library without code. Just add IpdsMultTouch.dll to project references. After this you can easily drag and drop TouchManiulatorBehavior from Assets/Behaviors to the control that you can make touchable. For finish all you need to add gestures to the behavior. Gestures can be built-in (like scale, translate, rotate) or your own and can be set on properties of the behavior. More gesture can be added.\r\nHere is the result:\r\n```\r\n<Image Source=\"/Images/Hydrangeas.jpg\" Stretch=\"Fill\">\r\n\t<i:Interaction.Behaviors>\r\n\t\t<TouchManipulator:TouchManipulatorBehavior>\r\n\t\t\t<TouchManipulator:TouchManipulatorBehavior.Gestures>\r\n\t\t\t\t<Gestures:Rotate/>\r\n\t\t\t\t<Gestures:Scale/>\r\n\t\t\t\t<Gestures:Translate/>\r\n\t\t\t</TouchManipulator:TouchManipulatorBehavior.Gestures>\r\n\t\t</TouchManipulator:TouchManipulatorBehavior>\r\n\t</i:Interaction.Behaviors>\r\n</Image>\r\n```\r\n\r\n###Creating custom Gesture:\r\nCreating custom Gesture is easy by inherit a class from the \"aGesture\" abstract class and override the Manipulate method that calling when ManipulationDelta event fire on the element. All gesture are processing sequentially by calling its Manipulate() method. Each gesture modify the matrix of the element transformation. The matrix parameter goes through gestures, all gesture make a modification on it. So be careful with the order of the gestures.\r\nAfter you build your project the gesture can be chosen in the Add item window.\r\n\r\nCreate a simple translation gesture:\r\n```\r\npublic class testGesture : IpdsMultiTouch.Gestures.aGesture\r\n{\r\n\tpublic testGesture() : base()\r\n\t{ }\r\n\r\n\tpublic override void Manipulate(\r\n\t\tSystem.Windows.Input.ManipulationDeltaEventArgs args,\r\n\t\tref Matrix matrix)\r\n\t{\r\n\t\tbase.Manipulate(args, ref matrix);\r\n\t\tVector trans;\r\n\t\ttrans = new Vector(args.DeltaManipulation.Translation.X, \r\n\t\t\t\targs.DeltaManipulation.Translation.Y);\r\n\r\n\t\tmatrix.Translate(trans.X, trans.Y);\r\n\t}\r\n}\r\n```\r\n### Authors and Contributors\r\nIn 2013, Lacc (@lacc).","google":"UA-43310748-1","note":"Don't delete this file! It's used internally to help with page regeneration."}